<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head'); %>
  </head>
  
  <body class="body">
    <header class="cabeçalho"><%- include('../partials/header'); %></header>

    <div class="cadastrar-titulo">
      <h2>Validação de Informações - Secretaria AEE</h2>
    </div>

    <div class="overlay"></div>
    <div class="spanner">
      <div class="loader"></div>
      <p>Buscando informações, por favor aguarde</p>
    </div>

    <div class="validacao-coord-subtitulo">
      <h3>Status Consolidado</h3>
    </div>

    <div class="validacao-aee">
        <div>
          <p><b>Dados de <%= start %> até <%= end%></b></p>
        </div>

        <div>
          <div class="row">
            <div class="col-md-6">
              <p><b> Quantidade Total de Casas:</b> <span  id="status_total_casas"></span> </p>
              <p ><b> Casas que Não Iniciaram o Cadastro:</b> <span id="status_nao_iniciaram"></span> </p>
              <p ><b> Casas que Iniciaram o Cadastro:</b> <span id="status_iniciaram"></span> </p>
              <p><b> Casas que Finalizaram o Cadastro:</b> <span  id="status_finalizaram"></span> </p>
            </div>
            <div class="col-md-6">
                <canvas id="myChart" style="width: 100%; max-width: 600px"></canvas>
            </div>

            <div class="col-md-6">
              
                <!-- <input
                  id="clickMe"
                  class="btn btn-primary"
                  type="button"
                  value="Baixar Respostas"
                  onclick="DownloadResponses();"
                /> -->
             
                <input
                  id="novo_centro"
                  class="btn btn-primary"
                  type="button"
                  value="Criar Centro"
                  onclick="window.location.href='/cadastro_centro'"
                />
             
            </div>

            <%- include('../modals/exporting.ejs') %>
            
          </div>
        </div>
      </div>  
      <br>

      <div class="validacao-coord-subtitulo">
        <h3>Status por Regional</h3>
      </div>

      <div class="validacao-aee">
        <div class="container">
          
          <%for(i=0;i<regionais.length;i+=4){%>
            <div class="row">

            <%for(var j=i; j<i+4 && j<regionais.length;j++){%>
              <%- include("../partials/summary_alianca_regional",{regionalInfo: regionais[j],start,end})%>
            <%}%>
          
          </div>
          <%}%>

        </div>

      <div>
        <div id="regionais" class="row"></div>
      </div>
    </div>

    

    <script>
      const openPopupBtn = document.querySelector('#open-popup');
      const popupWrapper = document.querySelector('.popup-wrapper');

      const start = <%- JSON.stringify(start) %> 
      const end = <%- JSON.stringify(end) %> 
      const regionais = <%- JSON.stringify(regionais) %>
      
      $(document).ready(function () {
        console.log("Ready disparado");
        myFunction();
        showOverlay();
      });

      var xValues = ["Total", "Iniciaram", "Terminaram"];
      var yValues = [0, 0, 0, 0];
      var barColors = ["yellow", "green"];

      var myChart = new Chart("myChart", {
        type: "bar",
        data: {
          labels: xValues,
          datasets: [
            {
              backgroundColor: barColors,
              data: yValues,
            },
          ],
        },
        options: {
          legend: {
            display: false,
          },
          title: {
            display: true,
            text: "Cadastros",
          },
        },
      });

      function myFunction() {
        var div = document.getElementById("regionais");
        callGetGeneralInfo(div);
      }

      function getDownloadButton(regionalName) {
        let a = document.createElement("a");
        a.setAttribute("class", "btn btn-primary");

        a.setAttribute(
          "onclick",
          `DownloadRegionalResponses('${regionalName}')`
        );
        a.innerText = "Baixar Respostas";
        return a;
      }

      function generateGUID() {
        function S4() {
          return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
        }
        return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
      }


      async function DownloadResponses() {
        try {

          popupWrapper.style.display = 'block';
          const exporting_guid = generateGUID();


          var apiUrl = `bff/exportrgeneralresponses?guid=${exporting_guid}`;
          let responseInfo = await fetch(apiUrl, {
            headers: {
              "Content-Type": "application/json",
            },
            method: "GET",
          });

          responseInfo = await responseInfo.json();
          if (responseInfo.fileName) {
            window.open(responseInfo.fileName);
          }
          return responseInfo;
        } catch (error) {
          console.log(`Error at Download General Report`, error);
          throw error;
        }
      }

      async function DownloadRegionalResponses(regionalName) {
        try {
          popupWrapper.style.display = 'block';

          const exporting_guid = generateGUID();
          var apiUrl = `bff/exportregionalresponses?regionalName=${regionalName}&guid=${exporting_guid}`;
          let responseInfo = await fetch(apiUrl, {
            headers: {
              "Content-Type": "application/json",
            },
            method: "GET",
          });

          responseInfo = await responseInfo.json();
          if (responseInfo.fileName) {
            window.open(responseInfo.fileName);
          }
          return responseInfo;
        } catch (error) {
          console.log(`Error at Download ${regionalName}`, error);
          throw error;
        }
      }

      function setRegionalInfo(data) {
        let total = data.centros.length;
        let respondido = data.summary.length;
        let started = data.started;

        const startedPercent = Math.round(100 * (started / total));
        const finishedPercent = Math.round(100 * (respondido / total));

        let color = "bg-warning";
        if (finishedPercent < 50) {
          color = "bg-danger";
        } else if (finishedPercent == 100) {
          color = "bg-success";
        }

        const card_body = document.getElementById(`card-body_${data._id}`)
        const divclass = card_body.className

        card_body.setAttribute("class", divclass.concat(" ").concat(color));

        const regional_iniciou = document.getElementById(`iniciado_${data._id}`)
        regional_iniciou.innerText = `${started} (${startedPercent}%)`

        const regional_finalizou = document.getElementById(`finalizado_${data._id}`)
        regional_finalizou.innerText = `${respondido} (${finishedPercent}%)`

        const regional_total = document.getElementById(`total_${data._id}`)
        regional_total.innerText = `${total}`
      }

      function addData(chart, label, data) {
        chart.data.labels.push(label);
        chart.data.datasets[0].data.push(data);
        chart.update();
      }

      function setGeneralInfo(total, started, finished) {
        myChart.data.datasets[0].data[0] = total;
        myChart.data.datasets[0].data[1] = started;
        myChart.data.datasets[0].data[2] = finished;

        const status_total_casas = document.getElementById("status_total_casas")
        status_total_casas.innerText= total

        const status_iniciaram = document.getElementById("status_iniciaram")
        status_iniciaram.innerText=started

        const status_nao_iniciaram = document.getElementById("status_nao_iniciaram")
        status_nao_iniciaram.innerText= total - started

        const status_finalizaram = document.getElementById("status_finalizaram")
        status_finalizaram.innerText=finished


        myChart.update();
      }

      function callGetGeneralInfo(div) {
        var apiUrl = `/bff/generalinfo?start=${start}&end=${end}`;
        fetch(apiUrl, {
          method: "GET",
        })
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            const responses = data.responses;

            const passes = data.passes;
            const centros = data.centros;

            let totalStarted = 0;
            let totalResponsesLength=0;

            for (const regional of regionais) {
              let started = 0;
              let regionalResponses = []
              const regionalInfo = {
                NOME_REGIONAL: regional.NOME_REGIONAL,
                PAIS: regional.PAIS,
              };

              let centrosOfRegional = centros.filter((m) => {
                try {
                  return m.REGIONAL._id == regional._id;  
                } catch (error) {
                  console.log(m)
                }
                
              });

              for (const centroInfo of centrosOfRegional) {
                const hasStarted = passes.find((m) => {
                  return m.scope_id === centroInfo._id;
                });

                const response = responses.find((m) => {
                  return m.CENTRO_ID === centroInfo._id;
                });

                if(response){
                  regionalResponses.push(response)  
                  totalResponsesLength++;
                }
                

                if (hasStarted) {
                  started++;
                }
              }


              totalStarted+=started;
              setRegionalInfo( {
                _id:regional._id,
                started: started,
                centros: centrosOfRegional,
                summary: regionalResponses,
              });
            }

            setGeneralInfo(
              centros.length,
              totalStarted,
              totalResponsesLength
            );

            hideOverlay();
          })
          .catch((err) => {
            console.log("---ERROR---", err);
            throw err;
            // Do something for an error here
          });
      }
    </script>

    <br />
    <footer><%- include('../partials/footer'); %></footer>
  </body>
</html>
