<script>
  function updateFormItem(item) {
    const subId = item.id.split("_");
    id = subId[0];

    var itemsChanged = document.getElementsByName(id);
    var itemChanged;

    let valueToApply

    itemChanged = itemsChanged[0];
    if(itemsChanged.length > 1){
      checkerIndex = subId[1]
      valueToApply = checkerIndex=="1"?"true":"false";
    }
    else{
      valueToApply = itemChanged ? itemChanged.value.toString(): ""
    }
      const questionId = itemChanged.getAttribute("questionId");
      const centroId = itemChanged.getAttribute("centroId");
      var apiUrl = `/bff/update_answer?questionId=${questionId}&centroId=${centroId}`;
      
      if (questionId) {
    
        fetch(apiUrl, {
        method: "PUT",
        headers: {
        'Content-Type': 'application/json'
        },
        body: JSON.stringify({
        answer: valueToApply
        })

        })
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            const responseInfo = data[0];
          })
          .catch((err) => {
            console.log("---ERROR---", err);
            throw error;
          });
    }
  }

  function callCreateRoute(table, clone, groupInfo, formId, centroId) {
    var apiUrl = `/bff/add_answer?centroId=${centroId}`;
    fetch(apiUrl, {
      method: "POST",
      headers: {
    'Content-Type': 'application/json'
  },
      body: JSON.stringify({
    groupInfo
  })
    })
      .then((response) => {
        console.log("AAA", response);
        return response.json();
      })
      .then((data) => {
        console.log("Will add Data", data);
        const children = clone.children;

        for (let index = 0; index < data.length; index++) {
          const item = data[index];
          const child = children[index];
          const childrenOfChildren = child.children;

          for (let index = 0; index < childrenOfChildren.length; index++) {
            const childOfChild = childrenOfChildren[index];
            childOfChild.setAttribute("id", item._id);
            childOfChild.setAttribute("name", item._id);
            childOfChild.setAttribute("value", item.ANSWER);
          }
        }

        console.log("Chegou ate aqui");
        var row = table.insertRow(-1);
        row.appendChild(clone);
      })
      .then((data) => {
        console.log("----ITEM ADDED", data);
      })
      .catch((err) => {
        console.log("---ERROR---", err);
        throw error;
        // Do something for an error here
      });
  }

  function callDeleteRoute(item, table_id, centroId, questionId, answerId) {
    var apiUrl = `/bff/remove_answer?centroId=${centroId}&questionId=${questionId}&answerId=${answerId}`;
    fetch(apiUrl, {
      method: "DELETE",
    })
      .then((response) => {
       
        return response.json();
      })
      .then((data) => {
        if(data?.removedItems>0){
          var p = item.parentNode;
          p.remove();
          console.log("--ITEM REMOVED--");
        }
        else{
          console.log("--ITEM NOT REMOVED--");
        }
      })
      .catch((err) => {
        console.log("---ERROR---", err);
        throw error;
        // Do something for an error here
      });
  }

  function Add(groupJson, formId, centroId) {
    const groupInfo = JSON.parse(groupJson)
    const groupId = groupInfo._id
    var table = document.getElementById(groupId);
    var template = document.getElementsByName(`group_${groupId}`);

    let lastTemplate = template[template.length - 1];

    var clone = lastTemplate.cloneNode(true);

    callCreateRoute(table, clone, groupInfo, formId, centroId);
  }

  function Delete(item, table_id, centroId) {
    const itemParent = item.parentNode;
    const itemParentParent = itemParent.parentNode;
    const children = itemParentParent.children;

    if (children.length == 1) {
      return;
    }

    for (let index = 0; index < children.length; index++) {
      const element = children[index];
      const elementChildren = element.children;

      for (let j = 0; j < elementChildren.length; j++) {
        const elementChild = elementChildren[j];
        const answerId = elementChild.getAttribute("id");
        const questionId = elementChild.getAttribute("questionid");
        if (answerId) {
          callDeleteRoute(element, table_id,centroId, questionId, answerId);
          break;
        }
      }
    }
  }
</script>
